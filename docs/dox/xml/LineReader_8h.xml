<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="LineReader_8h" kind="file" language="C++">
    <compoundname>LineReader.h</compoundname>
    <includes local="no">fstream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="split_8h" local="yes">../Strings/split.h</includes>
    <includedby refid="FileIO_8h" local="yes">/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/FileIO.h</includedby>
    <incdepgraph>
      <node id="105">
        <label>../Strings/split.h</label>
        <link refid="split_8h"/>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>string</label>
      </node>
      <node id="102">
        <label>fstream</label>
      </node>
      <node id="101">
        <label>/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/LineReader.h</label>
        <link refid="LineReader_8h"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>vector</label>
      </node>
      <node id="106">
        <label>sstream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="115">
        <label>/home/f/fraserj/Documents/Work/QDynamics/src/Quaternion.h</label>
        <link refid="Quaternion_8h"/>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>/home/f/fraserj/Documents/Work/QDynamics/src/Integrator.h</label>
        <link refid="Integrator_8h"/>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>/home/f/fraserj/Documents/Work/QDynamics/src/Magi.h</label>
        <link refid="Magi_8h"/>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>/home/f/fraserj/Documents/Work/QDynamics/src/Brute.h</label>
        <link refid="Brute_8h"/>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/FileIO.h</label>
        <link refid="FileIO_8h"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/LineReader.h</label>
        <link refid="LineReader_8h"/>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/Testing/Testing_UnitTests.h</label>
        <link refid="Testing__UnitTests_8h"/>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/CommandArgs/CommandArgs.h</label>
        <link refid="CommandArgs_8h"/>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>/home/f/fraserj/Documents/Work/QDynamics/src/DynamicOperations.h</label>
        <link refid="DynamicOperations_8h"/>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/CommandArgs/Argument.h</label>
        <link refid="Argument_8h"/>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/Testing/Testing.h</label>
        <link refid="Testing_8h"/>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/JSL.h</label>
        <link refid="JSL_8h"/>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="119">
        <label>/home/f/fraserj/Documents/Work/QDynamics/src/Symi.h</label>
        <link refid="Symi_8h"/>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>/home/f/fraserj/Documents/Work/QDynamics/QDynamics.h</label>
        <link refid="QDynamics_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="LineReader_8h_1a5480fba013891b2f3033cc97d5d8edf4" prot="public" static="no">
        <name>forLineIn</name>
        <param><defname>macroFileName</defname></param>
        <param><defname>...</defname></param>
        <initializer>{								\
	do 							\
	{							\
		std::ifstream macroFile(macroFileName);	\
		if (!macroFile.is_open())	\
		{							\
			std::cout &lt;&lt; &quot;\n\nERROR: Could not find the file &apos;&quot; &lt;&lt; macroFileName &lt;&lt; &quot;.\n\nPlease provide a valid filepath.\n\n &quot; &lt;&lt; std::endl;	\
			exit(1);				\
		}							\
		std::string FILE_LINE;				\
		while (getline(macroFile,FILE_LINE))	\
		{							\
			__VA_ARGS__				\
		}							\
		macroFile.close();			\
	} while(0);						\
}									\</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates through the file line-by-line (until EOF), saving the current line to <computeroutput>std::string FILE_LINE</computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>macroFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The target file to search through </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A custom block of C++ code which executes on every line of the file. You may use any externally defined variables within this block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current line is accessible via the variable <computeroutput>std::string FILE_LINE</computeroutput>. If the file does not exist, throws an <computeroutput>exit(1)</computeroutput> command </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/LineReader.h" line="16" column="9" bodyfile="/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/LineReader.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="LineReader_8h_1abdfa973ea7dd7efb90a74e8ec636f5ed" prot="public" static="no">
        <name>forLineVectorIn</name>
        <param><defname>macroFileName</defname></param>
        <param><defname>token</defname></param>
        <param><defname>...</defname></param>
        <initializer>{								\
	<ref refid="LineReader_8h_1a5480fba013891b2f3033cc97d5d8edf4" kindref="member">forLineIn</ref>(macroFileName,					\
			std::vector&lt;std::string&gt; FILE_LINE_VECTOR = <ref refid="namespaceJSL_1a34a7ba28084b304e97a707c653dce887" kindref="member">JSL::split</ref>(FILE_LINE,token);	\
			__VA_ARGS__;				\
	);									\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterates through the file line-by-line (until EOF), saving the current line to <computeroutput>std::string FILE_LINE</computeroutput>, and then tokenises it using <ref refid="namespaceJSL_1a34a7ba28084b304e97a707c653dce887" kindref="member">split()</ref>, based on the chosen delimiter, saving it to <computeroutput>std::vector&lt;std::string&gt;&gt; FILE_LINE_VECTOR</computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>macroFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The target file to search through </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The delimiter used to break up <computeroutput>FILE_LINE</computeroutput> into <computeroutput>FILE_LINE_VECTOR</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>A custom block of C++ code which executes on every line of the file. You may use any externally defined variables within this block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current line is accessible via the variable <computeroutput>std::string FILE_LINE</computeroutput> and <computeroutput>std::vector&lt;std::string&gt;&gt; FILE_LINE_VECTOR</computeroutput>. If the file does not exist, throws an <computeroutput>exit(1)</computeroutput> command </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/LineReader.h" line="43" column="9" bodyfile="/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/LineReader.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Strings/split.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="LineReader_8h_1a5480fba013891b2f3033cc97d5d8edf4" refkind="member"><highlight class="preprocessor">#define<sp/>forLineIn(macroFileName,<sp/>...)\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>macroFile(macroFileName);<sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!macroFile.is_open())<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n\nERROR:<sp/>Could<sp/>not<sp/>find<sp/>the<sp/>file<sp/>&apos;&quot;<sp/>&lt;&lt;<sp/>macroFileName<sp/>&lt;&lt;<sp/>&quot;.\n\nPlease<sp/>provide<sp/>a<sp/>valid<sp/>filepath.\n\n<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>FILE_LINE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(getline(macroFile,FILE_LINE))<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>macroFile.close();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="LineReader_8h_1abdfa973ea7dd7efb90a74e8ec636f5ed" refkind="member"><highlight class="preprocessor">#define<sp/>forLineVectorIn(macroFileName,<sp/>token,...)\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>forLineIn(macroFileName,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>FILE_LINE_VECTOR<sp/>=<sp/>JSL::split(FILE_LINE,token);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="/home/f/fraserj/Documents/Work/QDynamics/lib/JSL/FileIO/LineReader.h"/>
  </compounddef>
</doxygen>
